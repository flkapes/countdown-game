import random
import string
import time
import sys
from huepy import bold, red, green, yellow, good, bad, info, purple, cyan
from art import text2art
from collections import Counter
# import threading

vowels: list = list("aeiou")  # Creates a list of vowels
consonants: list = list(
    string.ascii_lowercase.replace(
        "a",
        "").replace(
        "e",
        "").replace(
        "i",
        "").replace(
        "o",
        "").replace(
        "u",
        ""))  # Creates a list of consonants


def select_characters() -> str:
    """
    This function uses a while loop to iterate through an input statement 9
    times. Depending on the users' answer to each input statement, the
    function concatenates a randomly selected vowel or consonant to the
    string cs_and_vs. The distribution of characters selected is in line
    with the distribution in the english language.

    Note: Weights for english letters were sourced from:
    https://www3.nd.edu/~busiforc/handouts/cryptography/letterfrequencies.html
    :return: Returns a random string of consonants and vowels
    :rtype: str
    """
    cs_and_vs: str = ""
    iterations: int = 0
    while iterations < 9:
        c_or_v = input(
            bold(
                cyan(
                    "Please input a c for a consonant or v for a vowel \t")))
        if c_or_v == 'c':
            cs_and_vs += random.choices(consonants,
                                        weights=(10.56, 23.13, 17.25, 9.24,
                                                 12.59, 15.31, 1, 5.61,
                                                 27.98, 15.36, 33.92, 16.14,
                                                 1, 38.64, 29.23, 35.43,
                                                 5.13, 6.57, 1.48, 9.06,
                                                 1.39),
                                        k=1)[0]
            iterations += 1
        elif c_or_v == 'v':
            cs_and_vs += random.choices(vowels,
                                        weights=(43.31, 56.88, 38.45, 36.51,
                                                 18.51),
                                        k=1)[0]
            iterations += 1
        else:
            print(bold(red("Please only enter the letter c or the letter v")))
            iterations = iterations
    return cs_and_vs


def dictionary_reader() -> list:
    """
    This function opens the words.txt file, and iterates through each line,
    checking each word to ensure it is suitable for gameplay, if a word is
    suitable it is appended to the possible answers list.
    :return: This function returns the list of words containing possible
        answers
    :rtype: list
    """
    possible_answers: list = []
    words = open('words.txt', 'r')
    words = words.read().split('\n')
    for word in words:
        word = word.strip("\n-")
        if len(word) < 10:
            possible_answers.append(word)
    return possible_answers


def word_lookup(words: list, rand_string: str):
    """
    This function takes the list of words that can be used for the game and the
    random string of consonants and vowels as arguments. The function then
    iterates through every word in the list. A list is created from the
    random string. Then the function iterates through every letter in the
    word, if the letter is in the random string list, it is appended to the
    letters_found variable. Once this is complete, we subtract the character
    occurrences in both the word, and the letters_found variable; if the
    length of the resulting dictionary is 0, the word is added to the
    possible answers list. The function then checks the length of the word
    found, if it is longer than the current longest word, its length is set
    as the new longest word. After all the possible answers are found, the
    function creates a list of longest answers by using the length of the
    longest word and appending all words that are this long to the longest
    answers list.
    :param words: The list of words parsed by the dictionary_reader function
    :type words: list
    :param rand_string: The string of random characters generated by the user
    :type rand_string: str
    :return: The list of longest_answers, and the list of possible_answers
    :rtype: list
    """
    longest_word_length: int = 0
    possible_answers: list = []
    longest_answers: list = []
    for word in words:
        letters_found: str = ""
        rand: list = list(rand_string)
        for letter in word:
            if letter in rand:
                letters_found += rand.pop(rand.index(letter))
        if len(Counter(word) - Counter(letters_found)) == 0:
            possible_answers.append(word)
            if len(word) > longest_word_length:
                longest_word_length = len(word)

    for word in possible_answers:
        if len(word) == longest_word_length:
            longest_answers.append(word)

    return longest_answers, possible_answers


def countdown(t):
    """
    Creates a timer that counts down from time t on the same line.
    :param t: Countdown timer length
    :type t: int
    """
    while t >= 0:
        sys.stdout.write('\rDuration : {}s'.format(t) + "\n")
        t -= 1
        time.sleep(1)


"""class MyThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        countdown(30)
        while True:
            pass"""


def main():
    """
    This is the main function, when it is run it calls all necessary
    functions and checks the guess that the user made and outputs
    the corresponding set of statements depending on the correctness
    and length of the answer.
    """
    points: int = 0
    print(bold(red(text2art("Countdown"))))
    parsed_words: list = dictionary_reader()
    random_char_selections: str = select_characters()
    print(
        bold(
            yellow("\nYour randomly selected characters: ") +
            red(random_char_selections)) +
        "\n")
    # th = MyThread()
    # th.start()
    guessed_word = input(
        bold(cyan("Please input your best guess for this "
                  "set of characters \t")))
    longest_answers, all_answers = word_lookup(
        parsed_words, random_char_selections)
    guessed_word = guessed_word.strip()
    if guessed_word in longest_answers:
        points += len(longest_answers[0])
        print(
            bold(
                good(
                    green(
                        "You have scored " + str(len(guessed_word)) +
                        " points! This is the longest word "
                        "that can be made using the random"
                        "string of characters."))))
        print(
            bold(
                info(
                    red("The longest answers are as follows: \n\t") +
                    purple(
                        str(longest_answers)))))
    elif guessed_word in all_answers and guessed_word not in longest_answers:
        points += len(guessed_word)
        print(
            bold(
                info(
                    green(
                        "You have scored " + str(len(guessed_word)) +
                        " points! This is not the longest "
                        "word that can be made using the "
                        "random string of characters."))))
        print(
            bold(
                info(
                    red("The longest answers are as follows: \n\t") +
                    purple(
                        str(longest_answers)))))
    else:
        print(bold(bad(red("Incorrect! Word not found."))))
        print(
            bold(
                info(
                    red("The longest answers are as follows: \n\t") +
                    purple(
                        str(longest_answers)))))


main()
